theory PK_IOTA
begin

section{* PK_IOTA *}

/*
 * Protocol: PK-IOTA verification (OPC UA Secure Conversation mode SignAndEncrypt)I
 * Modeler:  Lorenzo Rinieri
 * Date: 7 November 2024
 * Status: Working (secure)
 */

 builtins: signing, asymmetric-encryption, hashing


/* Public keys generation */
/* Now the admin also pushes the keys to the blockchain */
rule genServerKey:
    [ Fr(~x) ]
    --[ ServerKey($S, pk(~x)) ]->
    [ !Ltk($S, ~x), Out(<$S, pk(~x)>), Out_Blockchain($Admin,$P4Controller,<$S, pk(~x)>)]


rule genClientKey:
    [ Fr(~x) ]
    --[ ClientKey($C, pk(~x)) ]->
    [ !Ltk($C, ~x), Out(<$C, pk(~x)>), Out_Blockchain($Admin,$P4Controller,<$C, pk(~x)>)]

/*
// No corruption for the moment.
rule corrupt:
    [ !Ltk($C, ~x) ]
    --[ Corrupt($C, pk(~x)) ]->
    [ Out(<$C, ~x>) ]
*/


/* C -> DE : GEReq */
rule Init:
let
    m = 'GEReq'
in
    [ ]
    --[ Init($C, $S) ]->
    [ Out(m) ]


/* DE  -> C : GERes, pk(S), SignEnc, SP, UP */
rule Resp_Init:
let
    m = 'GEReq'
    m2 = <'GERes', pk(~x), 'SignEnc', $SP, $UP>
in
    [ In(m), !Ltk($S, ~x) ]
    --[ Resp($C, $S) ]->
    [ Out(m2) ]


/* C -> S : pk(C), aenc(<OSCReq, pk(C), Nc>, pk(S) , sign(h(OSCReq, pk(C), Nc ), sk(C) ) */
/* Where Nc is a fresh nonce generated by C */
rule Resp_Client:
let
    m = <'GERes', keyS, 'SignEnc', sp, up>
    m2 = <'OSCReq', pk(~x), ~nc>
in
    [ In(m), !Ltk($C, ~x), Fr(~nc)]
    --[ Resp_Client($C, $S, ~nc, keyS, pk(~x)), WitnessNc($C, $S, ~nc) ]->
    [ Out(<pk(~x), aenc(m2, keyS), sign{h(m2)}~x, h(m2)>) ]


/* SE -> C : aenc(<OSCRes, NS , ST, TTL>, pk(C)), sign(h(OSCRes, NS , ST, TTL), sk(S)) */
rule Resp_Server:
let
    m = <'OSCReq', keyC, nc>
    m2 = <'OSCRes', ~ns, $ST, $TTL>
in
    [ !Ltk($S, ~x), In(<keyC, aenc(m, pk(~x)), signature, h(m)>), Fr(~ns) ]
    --[ Eq(verify(signature, h(<'OSCReq', keyC, nc>), keyC), true), Resp_Server($C, $S, ~ns, keyC, pk(~x)), RequestNc($C, $S, nc), WitnessNs($S, $C, ~ns) ]->
    [ Out(<pk(~x), aenc(m2, keyC), sign{h(m2)}~x, h(m2)>) ]


/* Client authenticates server on Ns */
rule Auth_Client:
let
    m = <'OSCRes', ns, st, ttl>
in
    [ !Ltk($C, ~x), In(<keys, aenc(m, pk(~x)), signature, h(m)>) ]
    --[ Eq(verify(signature, h(<'OSCRes', ns, st, ttl>), keys), true), RequestNs($S, $C, ns) ]->
    [ ]


/* The IOTA Blockchain is modeled as an Authentic Channel */
/* An adversary can read messages sent on an authentic channel. */
/* However, on an authentic channel, the adversary cannot modify the messages or their sender. */
/* Channel rules */
rule ChanOut_Blockchain:
    [ Out_Blockchain($Admin,$P4Controller,x) ]
    --[ ChanOut_Blockchain($Admin,$P4Controller,x) ]->
    [ !Auth_Blockchain($Admin,x), Out(<$Admin,$P4Controller,x>) ]

rule ChanIn_Blockchain:
    [ !Auth_Blockchain($Admin,x), In(<$Admin,$P4Controller,x>) ]
    --[ ChanIn_Blockchain($Admin,$P4Controller,x) ]->
    [ In_Blockchain($Admin,$P4Controller,x) ]

/* The Channel between P4 Controller and P4 Switch is modeled as an Secure Channel */
/* Secure channels have the property of being both confidential and authentic. Hence an adversary */
/* can neither modify nor learn messages that are sent over a secure channel. However, an adversary */
/* can store a message sent over a secure channel for replay at a later point in time. */
/* Channel rules */
rule ChanOut_Controller:
    [ In_Blockchain($Admin,$P4Controller,x) ]
    --[ ChanOut_Controller($Controller, $Switch, x) ]->
    [ !Sec_Controller($Controller, $Switch, x) ]

rule ChanIn_Controller:
    [ !Sec_Controller($Controller, $Switch, x) ]
    --[ ChanIn_Controller($Controller, $Switch, x), Allowed(x) ]->
    [ In_Controller($Controller, $Switch, x) ]


axiom Equality:
    "All x y #i. Eq(x, y) @ #i ==> x = y"


// The last rule of the protocol can be executed.
lemma Executable:
    exists-trace
    "Ex C S ns keyS keyC #i. Resp_Server(C, S, ns, keyC, keyS) @ #i"


// If a server and a client think they executed a session together, the adversary does not know the derived key.
lemma Key_secrecy_1:
    all-traces
    "All C S nc ns keyS keyC #i #j. (Resp_Server(C, S, ns, keyC, keyS) @ #i & Resp_Client(C, S, nc, keyS, keyC) @ #j) ==> (All #k. K(h(<nc, ns>)) @ #k ==> F) "


// The four rules are always executed in correct order within one session.
lemma Order:
    all-traces
    "All C S nc ns pkc pks #i #j #k #l. ((Init(C,S) @ #i & Resp(C,S) @ #j & Resp_Client(C,S,nc,pkc,pks) @ k & Resp_Server(C,S,ns,pkc,pks) @ #l) ==> (#i < #j & #j < #k & #k < #l) )"


// Client authenticates server on nc.
// lemma Nc_auth:
lemma No_Rogue_Client:
    all-traces
    "All C S keyC m #t1 #t2 . (Allowed(<C, keyC>) @ #t1 & RequestNc(C, S, m) @ #t2 & t1 < t2) ==> (Ex #j . WitnessNc(C, S, m) @ #j & j<t2)"


// Server authenticates client on ns.
// lemma Ns_auth:
lemma No_Rogue_Server:
    all-traces
    "All C S keyS m #t1 #t2 . (Allowed(<S, keyS>) @ #t1 & RequestNs(C, S, m) @ #t2 & t1 < t2) ==> (Ex #j . WitnessNs(C, S, m) @ #j & j<t2)"

end
